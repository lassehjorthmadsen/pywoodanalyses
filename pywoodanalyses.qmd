---
title: "Quick look at data from pywood"
author: "Lasse Hjorth Madsen"
date: today
toc: true
execute:
  echo: false
  warning: false
  cache: true
---

```{r}
library(tidyverse)
library(purrr)
library(DT)
theme_set(theme_minimal())
```

```{r get_data}
#| warning: false
#| cache: true

patterns <- c("stockoption_streams", "stockoption_snapshots", "option_spaces", "stock_", "stockoption_[0-9]{8}", "moneyness_")

files <- list.files("~/Python-Projects/pywood/exploration/data/", pattern = paste0(patterns, collapse = "|"), full.names = T)

files_split <- patterns |> 
  map(grep, files) |> 
  map(\(x) files[x])

dfs <- files_split |> 
  map(set_names) |> 
  map(\(x) map_dfr(x, \(x) read_csv(x, show_col_types = FALSE), .id = "file")) |> 
  map(mutate, file = basename(file)) |> 
  map(select, -starts_with("..."))
   
```

```{r clean_data}
spaces  <- dfs[[3]] |> mutate(across(Expiry, as.Date))|> distinct(Uic, .keep_all = T) 
streams <- dfs[[1]] |> left_join(spaces, by = c("refid" = "Uic"))
snaps   <- dfs[[2]] |> left_join(spaces, by = c("ReferenceId" = "Uic"))
     
stocks  <- dfs[[4]]
options <- dfs[[5]] |> distinct(Identifier, .keep_all = T) 
money   <- dfs[[6]] |> mutate(across(Time, as.Date)) |> distinct(Uic, Time, .keep_all = T)
```

## Why this?

This is a quick look at the data on stock options harvested by `pywood`.

## Basics

### How many stock options do we have in the snapshots

I.e. how many do we attempt to collect streaming prices for? Each file listed below covers a number of stock options, picked and sampled from the large *option space* of 
all stock options.

```{r}
snaps |> count(file = file.x) 
```

### How many stock options do we actually receive streaming data for?

A lot fewer. But funny enough, for some small samples (`stockoption_snapshots_23022024.csv`), apparently we got the most streams? Perhaps just due to luck -- hitting some popular options.

```{r}
streams |> group_by(file = file.x) |> summarise(`unique refids` = length(unique(refid)))
```

### Does the option identifier change?

Let's check if the same identifier sometimes has different descriptions (using all option files). That doesn't seem to be the case:

```{r}
#| fold: true
dfs[[5]] |> 
  distinct(Identifier, Description) |> 
  add_count(Identifier, name = "n_identifier") |> 
  slice_max(order_by = n_identifier, n = 10, with_ties = FALSE)
```

### What expiry dates are available?

Count of expiry dates: In the near future we see about one date per week. In the more distant future expiry dates are less dense.

```{r}
spaces |> count(Expiry)
```


### What are the underlying stocks that generate streaming data?

These are the stocks whose derived options generated the most streaming data.
\

```{r}
#| fold: true
#| column: page-right
streams |> 
  count(refid, Description, ExchangeId = Exchange.ExchangeId, Expiry, StrikePrice, PutCall, 
        name = "n_streams", 
        sort = TRUE) |> 
  select(-refid) |>
  datatable(rownames = FALSE)
```

## The curious case of Nvidia
\
It's interesting to note that NVidia, that generated a lot of [buzz](https://social.saxo/qyzxmuf?uuid=ZG94DEv) recently, also got a lot of stock option interest, as seen by the many streams we received. Exactly what variants of options got the attention? Apparently only call options with strike price 695. Here's the count of stream data we got from Nvidia-options:
\


```{r}
#| fold: true
#| column: page-right
streams |> 
  count(refid, Description, ExchangeId = Exchange.ExchangeId, Expiry, StrikePrice, PutCall, 
        name = "n_streams", 
        sort = TRUE) |> 
  select(-refid) |>
  filter(Description == "NVidia Corp.") |> 
  datatable(rownames = FALSE, options = list(dom = 't'))
```

\
This *could* have been for good reason; perhaps only that option got included in the random sample? But no, we did have snapshots (for which we created subscriptions) for more variants for that option:
\

```{r}
#| column: page-right
temp <- snaps |> 
  filter(Description == "NVidia Corp.") |> 
  select(file.x, file.y, Description, 
         AssetType = Snapshot.AssetType, 
         Quote.Mid = Snapshot.Quote.Mid, 
         Expiry, PutCall, StrikePrice, UnderlyingUic) |> 
  arrange(Description, PutCall, StrikePrice, Expiry) 

temp |> 
  count(Description, PutCall, Expiry, StrikePrice)
```

(When we get several observations of the same option, it's because it's included in several snapshots.) 

Let's split the many streams we got from Nvidia a bit further. Here's boxplots of ask- and bid-prices and -sizes.

All values have a central tendency -- with some pretty big outliers. Note also, that ask prices tend to be a bit higher than bid prizes. That sounds natural, but maybe a viable strategy is in fact to continuously place buy or sell orders with prizes as slightly low or high, in the hopes that someone will bite?

```{r}
plot_data <- streams |> 
  filter(Description == "NVidia Corp.") |> 
  pivot_longer(cols = c(msg_Quote_Ask, msg_Quote_AskSize, 
                        msg_Quote_Bid, msg_Quote_BidSize, msg_Quote_Mid), 
                      names_to = "metric", values_to = "value") |> 
  filter(!is.na(value)) |> 
  mutate(metric_type = case_when(str_detect(metric, "Size") ~ "Size",
                                 TRUE ~ "Price"))

plot_data |> 
  ggplot(aes(x = metric, y = value)) +
  facet_wrap(facets = vars(metric_type), scales = "free") +
  geom_boxplot() +
  labs(title = "Streaming ask/bid prizes and ask/bid sizes for for Nvidia call options",
       subtitle = "Expiry: 2024-03-15, strike: 695")
```

Let's have a closer look at the extreme outlier, where someone (but not nesscarity a single investor) tried  to buy more than 600 contracts (each of 100 shares, I guess) of Nvidia call options.


```{r}
streams |> 
  filter(Description == "NVidia Corp.") |> 
  slice_max(msg_Quote_BidSize) |> 
  select(starts_with("msg_"), -contains("Type"))
```

So that extreme bid took place at `2024-02-23 14:30:11`, GMT+1. Nasdaq is at EST (GMT-6), so in New York that would be at 8:30 in the morning. About that time, Nvidia took a big jump, from about 777 to 820. (Actually that was about 9:30 AM as reported by [Yahoo Finance](https://finance.yahoo.com/chart/NVDA?showOptin=1#eyJpbnRlcnZhbCI6MSwicGVyaW9kaWNpdHkiOjEsInRpbWVVbml0IjoibWludXRlIiwiY2FuZGxlV2lkdGgiOjEuODMzMzMzMzMzMzMzMzMzMywiZmxpcHBlZCI6ZmFsc2UsInZvbHVtZVVuZGVybGF5Ijp0cnVlLCJhZGoiOnRydWUsImNyb3NzaGFpciI6dHJ1ZSwiY2hhcnRUeXBlIjoibGluZSIsImV4dGVuZGVkIjpmYWxzZSwibWFya2V0U2Vzc2lvbnMiOnt9LCJhZ2dyZWdhdGlvblR5cGUiOiJvaGxjIiwiY2hhcnRTY2FsZSI6ImxpbmVhciIsInBhbmVscyI6eyJjaGFydCI6eyJwZXJjZW50IjoxLCJkaXNwbGF5IjoiTlZEQSIsImNoYXJ0TmFtZSI6ImNoYXJ0IiwiaW5kZXgiOjAsInlBeGlzIjp7Im5hbWUiOiJjaGFydCIsInBvc2l0aW9uIjpudWxsfSwieWF4aXNMSFMiOltdLCJ5YXhpc1JIUyI6WyJjaGFydCIsIuKAjHZvbCB1bmRy4oCMIl19fSwibGluZVdpZHRoIjoyLCJzdHJpcGVkQmFja2dyb3VuZCI6dHJ1ZSwiZXZlbnRzIjp0cnVlLCJjb2xvciI6IiMwMDgxZjIiLCJzdHJpcGVkQmFja2dyb3VkIjp0cnVlLCJldmVudE1hcCI6eyJjb3Jwb3JhdGUiOnsiZGl2cyI6dHJ1ZSwic3BsaXRzIjp0cnVlfSwic2lnRGV2Ijp7fX0sInN5bWJvbHMiOlt7InN5bWJvbCI6Ik5WREEiLCJzeW1ib2xPYmplY3QiOnsic3ltYm9sIjoiTlZEQSIsInF1b3RlVHlwZSI6IkVRVUlUWSIsImV4Y2hhbmdlVGltZVpvbmUiOiJBbWVyaWNhL05ld19Zb3JrIn0sInBlcmlvZGljaXR5IjoxLCJpbnRlcnZhbCI6MSwidGltZVVuaXQiOiJtaW51dGUifV0sImN1c3RvbVJhbmdlIjp7InN0YXJ0IjoxNzA4NjEyMjAwMDAwLCJlbmQiOjE3MDg3MjE5NDAwMDB9LCJzdHVkaWVzIjp7IuKAjHZvbCB1bmRy4oCMIjp7InR5cGUiOiJ2b2wgdW5kciIsImlucHV0cyI6eyJpZCI6IuKAjHZvbCB1bmRy4oCMIiwiZGlzcGxheSI6IuKAjHZvbCB1bmRy4oCMIn0sIm91dHB1dHMiOnsiVXAgVm9sdW1lIjoiIzAwYjA2MSIsIkRvd24gVm9sdW1lIjoiI2ZmMzMzYSJ9LCJwYW5lbCI6ImNoYXJ0IiwicGFyYW1ldGVycyI6eyJ3aWR0aEZhY3RvciI6MC40NSwiY2hhcnROYW1lIjoiY2hhcnQiLCJwYW5lbE5hbWUiOiJjaGFydCJ9fX0sInJhbmdlIjp7ImR0TGVmdCI6IjIwMjQtMDItMjFUMjM6MDA6MDAuOTI4WiIsImR0UmlnaHQiOiIyMDI0LTAyLTI0VDIyOjU5OjAwLjkyOFoiLCJwZXJpb2RpY2l0eSI6eyJpbnRlcnZhbCI6MSwicGVyaW9kIjoxLCJ0aW1lVW5pdCI6Im1pbnV0ZSJ9LCJwYWRkaW5nIjowfX0-) maybe we have a daylight saving-thing?)

The days before, February 21 to February 22, Nvidia saw an even bigger jump, due to record-breaking earnings (mentioned in the above link.)

Do prices and bids correlate; i.e. when a lot of people want to buy Nvidia, do they want to pay a premium also? First, untransformed pearson correlations (still Nvidia streams only):

```{r}
cor_data <- streams |> 
  filter(Description == "NVidia Corp.") |> 
  select(Ask = msg_Quote_Ask, AskSize= msg_Quote_AskSize, 
         Bid = msg_Quote_Bid, BidSize = msg_Quote_BidSize, Mid = msg_Quote_Mid) |> 
  mutate(across(everything(), \(x) x))

cor_data |> 
  cor(use = "pairwise") |> 
  round(2)
```
Try log everything; pretty much same picture:


```{r}
cor_data |> 
  mutate(across(everything(), \(x) log(x))) |> 
  cor(use = "pairwise") |> 
  round(2)
```

If anything, it looks like big asks and big bids go together with low prices. How does this make sense? The BidSize/Bid negative correlation is perhaps fine: If we want to buy a lot we would like to do so at a lowish price. But wouldn't we expect a positive correlation between AskSize and Ask: We want to sell something at a highish price?

The data is limited to Nvidia; maybe this is a special case. Let's revisit later, for more options.

For sake of completeness, let's do a plot also:

```{r}
cor_data |> 
  mutate(color = BidSize == max(BidSize, na.rm = T)) |> 
  ggplot(aes(x = BidSize, y = Bid, color = color), show.legend = F) +
  geom_jitter(size = 1, show.legend = F) +
  scale_colour_manual(values = c("black", "red")) +
  geom_smooth(show.legend = F, color = "blue") +
  scale_x_log10() +
  labs(title = "Streaming bid prizes and bid sizes for for Nvidia call options",
      subtitle = "Expiry: 2024-03-15, strike: 695")
```
It actually does look like the big bid for Nvidia call options (red dot) was offered at a relatively high price.

How profitable was it, on 2024-02-23, to by Nvidia call options at 113 USD with a strike price of 695, expiry date 2024-03-15? Here's the latest price data we collected:

```{r}
nvidia_call_uic <- streams |> 
  filter(Description == "NVidia Corp.") |> 
  slice_max(msg_Quote_BidSize) |> 
  pull(refid)

nvidia_stock_uic <- spaces |> 
  filter(Uic == nvidia_call_uic) |> pull(UnderlyingUic)

money |> filter(Uic == nvidia_stock_uic) |> slice_max(Time)
```

A quick glance says it maybe wasn't all that valuable: We would pay ~100\$ to buy a stock worth ~800\$ for ~700\$? Note that the price is per stock, and a contract usually consists of 100 stocks, so the price to pay would be $100\$ \times 100 = 10,000\$$ for each of the 600 bids in BidSize.  

## Moneyness

The plan: 

  - Get price at expiration time for all underlying stocks in stock option-space. 
  - Then, calculate 'moneyness' for all options: The difference between price at expiration date and strike price (sign determined by call/putt). 
  - Then, compare moneyness (i.e. profitability) for:  
    a. options that we do/don't have streaming data for
    b. call/put options 
    c. options with much/little stream data 
    d. options with high/low trading volume on underlying stock 
  

```{r}
streams_agg <- streams |> 
  group_by(refid) |> 
  summarise(n_streams = n(),
            mean_AskSize = mean(msg_Quote_AskSize, na.rm = T),
            mean_BidSize = mean(msg_Quote_BidSize, na.rm = T),
            .groups = "drop")

moneyness  <- spaces |> 
  left_join(money, by = c("UnderlyingUic" = "Uic", "Expiry" = "Time")) |> 
  left_join(streams_agg, by = c("Uic" = "refid")) |> 
  select(Description, ExerciseStyle, 
         ExchangeId = Exchange.ExchangeId, 
         Expiry, PutCall, StrikePrice, Uic, UnderlyingUic, Close, Volume,
         n_streams, mean_AskSize, mean_BidSize) |> 
  mutate(moneyness = case_when(PutCall == "Call" ~ (Close - StrikePrice),
                               PutCall == "Put" ~ (StrikePrice - Close),
                               TRUE ~ NA_real_)) |> 
  filter(!is.na(moneyness)) |> 
  replace_na(list(n_streams = 0))
```

First, overall moneyness for all call options available (put options are just the negative of this):


```{r}
moneyness |> 
  filter(PutCall == "Call") |> 
  summarise(mean_moneyness = mean(moneyness),
            median_moneyness = median(moneyness))
```

```{r}
moneyness |> 
  filter(PutCall == "Call") |> 
  ggplot(aes(x = moneyness)) +
  geom_density()
```



```{r}
quantile_df <- function(x, probs = seq(0.1, 0.9, 0.1)) {
  tibble(
    value = quantile(x, probs, na.rm = TRUE),
    quant = probs
  )
}

temp2 %>%
  reframe(quantile_df(moneyness), .by = PutCall) |> 
  ggplot(aes(x = quant, y = value, fill = PutCall)) + 
  geom_col(position = "dodge") +
  scale_x_continuous(breaks = seq(0, 1, 0.1)) +
  labs(x = "Quantile", y = "Moneyness",
       title = "Moneyness for stock options by put/call and quantile",
       subtitle = "Looks like call options do much better than put?")
```

Another way of looking at it:

```{r}
temp2 |> 
  ggplot(aes(x = moneyness, fill = PutCall)) +
  geom_density(color = NA, alpha = 0.6) +
  scale_x_continuous(limits = c(-100, 100)) +
  labs(x = "Moneyness", y = "Density",
       title = "Moneyness distribution for stock options by put/call",
       subtitle = "Still looks like call options do much better than put")
```

```{r}
temp2 |> 
  ggplot(aes(x = Volume, y = moneyness, color = PutCall)) +
  geom_jitter(size = 1, alpha = 0.3) +
  scale_x_log10() +
  scale_y_continuous(limits = c(-100, 100)) +
  geom_smooth(se = FALSE) +
  labs(x = "Trade volume on expiry date (log)", y = "Moneyness",
       title = "Moneyness for stock options by put/call and trade volume",
       subtitle = "Looks pretty messy")
```


```{r}
temp2 |> 
  ggplot(aes(x = n_streams, y = moneyness, color = PutCall)) +
  geom_jitter(size = 1, alpha = 0.3) +
  #scale_x_log10() +
  scale_y_continuous(limits = c(-100, 100)) +
  geom_smooth(se = TRUE) +
  labs(x = "Number of streams collected", y = "Moneyness",
       title = "Moneyness for stock options by put/call and stream volume",
       subtitle = "Looks pretty dull")
```


```{r}
temp2 |> 
  mutate(saw_streams = n_streams != 0) |> 
  ggplot(aes(x = moneyness, fill = PutCall)) +
  geom_density(color = NA, alpha = 0.6) +
  scale_x_continuous(limits = c(-100, 100)) +
  facet_wrap(facets = vars(saw_streams)) +
  labs(x = "Moneyness", y = "Density",
       title = "Moneyness distribution for stock options by put/call, and if we saw streams",
       subtitle = "Still looks like call options do better than put.\nAnd higher variance for non-streaming options.")
```

## What subset of options makes sense to monitor?

### At what exchanges can we trade stock options?

Apparently only OPRA and EUR_BRU2 -- but wait, for most streams we explicitly filtered for those two only, so no big surprise that only they show up.

```{r}
spaces |> count(ExchangeId = Exchange.ExchangeId, sort = T)
```

Look at a specific session where we didn't do the exchange filter. Okay, even here, we only have OPRA and EUR_BRU2.

```{r}
snaps |> 
  filter(file.x == "stockoption_snapshots_28022024.csv") |> 
  count(file = file.x, ExchangeId = Exchange.ExchangeId)
```
Looking at the full option space, it seems that indeed those are the only two exchanges where we can buy stock options through Saxo Bank:

```{r}
#| echo: true
spaces |> count(ExchangeId = Exchange.ExchangeId)
```


### Do we see most trading at median strike prices?

Yes, the most action seems to be around the 'neutral' current stock price. Note that call options tend to ask for lower strike prices, put options a bit highter, which makes sense.

```{r}
strike_ranks <- spaces |> 
  group_by(UnderlyingUic, PutCall, Expiry) |> 
  mutate(strike_rank = rank(StrikePrice),
         strike_rank = strike_rank - floor(median(strike_rank))) |>
  group_by(UnderlyingUic, PutCall) |> 
  mutate(expiry_rank = rank(Expiry),
         expiry_rank = expiry_rank - floor(median(expiry_rank))) |> 
  ungroup() |> 
  select(Uic, UnderlyingUic, Description, PutCall, 
         Expiry, StrikePrice, strike_rank, expiry_rank) |>
  arrange(UnderlyingUic, PutCall, Expiry, StrikePrice)
  
streams |> 
  left_join(strike_ranks, by = c("refid" = "Uic")) |> 
  count(PutCall = PutCall.x, strike_rank) |> 
  ggplot(aes(x = strike_rank, y = n, fill = PutCall)) +
  geom_col(position = "dodge") +
  scale_x_continuous(breaks = seq(-10, 10, 1)) +
  labs(x = "Strike price offset", y = "Count",
       title = "Streaming data by strike price",
      subtitle = "Measured by 'offset' from the median; +1 is one increment above median")
```


### Do we see more trading when strike date is close?

Yes, although this pattern could be due to me doing the data collection at specific dates. 

```{r}
streams |> 
  mutate(days_to_expiry = Expiry - as.Date(msg_LastUpdated)) |> 
  filter(!is.na(days_to_expiry)) |> 
  ggplot(aes(x = days_to_expiry, fill = PutCall)) +
  geom_density(color = NA, alpha = 0.5) +
  scale_x_continuous(breaks = seq(0, 150, 10)) +
  labs(x = "Strike price offset", y = "Count",
       title = "Number of days between observed streaming price and strike date",
       subtitle = "Stock options usually have a few expiry dates per month")
```




```{r}
streams |> 
  left_join(strike_ranks, by = c("refid" = "Uic")) |> 
  count(PutCall = PutCall.x, expiry_rank) |> 
  ggplot(aes(x = expiry_rank, y = n, fill = PutCall)) +
  geom_col(position = "dodge") +
  labs(x = "Strike date offset", y = "Count",
       title = "Streaming data by strike date",
      subtitle = "Measured by 'offset' from the median; +1 is one increment above median") 
  
```
